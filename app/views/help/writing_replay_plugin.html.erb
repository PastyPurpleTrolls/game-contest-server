<br>
<ol class="breadcrumb">
    <li><%= link_to 'Home', root_path %></li>
    <li><%= link_to 'Help', help_path %></li>
    <li class="active">Writing a Replay Plugin</li>
</ol>

<div class="row">
    <div class="display-container">
        <h1>Writing a Replay Plugin</h1>
        <p>
            Every referee should be uploaded along with a replay plugin. Replays are an important piece of the learning
            experience and allow students to figure out what their player did during competition matches.
        </p>
        <p>
            Replay plugins must be uploaded in a compressed file containing <code>script.js</code> and any other assets
            required by the plugin. Allowed compressed file formats are <code>.tar</code> and <code>.zip</code>. The
            compressed file must be a flat directory structure, any folders uploaded will not be available for use.
        </p>
    </div>
</div>

<div class="row">
    <div class="display-container">
        <h2 class="help-l2-header"><b>Logs</b></h2>
        <p>
            Log files are generated from data sent by the referee over the course of a round. This log is loaded and made
            available to the Replay plugin on load.
        </p>
        <p>
            Moves always have a description and data. Move data can be sent in any format by the game referee, but JSON is
            preferred to allow for easy parsing. Optionally, the game referee can send game state after a move to provide
            information as to what the game looked like after the move was completed. If provided, <code>gamestate</code> will
            be listed as an additional key:value pair in the move object.
        </p>

        <p>Example:</p>
        <pre><code class="js">{
    "results": {
        "Player2": {
            "result": "Win",
            "score": "1"
        },
        "Player1": {
            "result": "Loss",
            "score": "0"
        }
    },
    "moves": [{
        "description": "Player2 plays w",
        "data": "['Player2', 'w']"
    }],
    "info": "0"
}</code></pre><br>
    </div>
</div>

<div class="row">
    <div class="display-container">
        <h2 class="help-l2-header"><b>Example Plugin</b></h2>
        <p>
            The GitHub repository contains an
            <a href="https://github.com/PastyPurpleTrolls/game-contest-server/blob/dev/examples/guess-w/script.js"
               class="text-underline">
                example replay plugin</a>.
        </p>
    </div>
</div>

<div class="row">
    <div class="display-container">
        <h2 class="help-l2-header"><b>API</b></h2>
        <p>
            Every plugin must define <code>script.js</code>. This script defines the logic for generating gamestates and
            rendering the game to the screen.
        </p>
        <p>
            The Replay API is defined in
            <a href="https://github.com/PastyPurpleTrolls/test/blob/master/app/assets/javascripts/round.js"
               class="text-underline">round.js</a>.
            Please refer the commented source for any questions on exact functionality.
            <a href="http://pixijs.com"
               class="text-underline">PIXI.js</a> runs the rendering code for displaying replays. Please refer to its
            <a href="https://pixijs.github.io/docs/index.html"
               class="text-underline">documentation</a> when writing rendering code.
        </p>
    </div>
</div>

<div class="row">
    <div class="display-container">
        <h2 class="help-l2-header"><b>Replay API</b></h2>
        <p>
            The Replay API is available through the global Replay object. Plugins should modify the prototype
            (<code>Replay.prototype</code>) to define functionality and attributes.
        </p>
        <p>
            Three settings are available to Replay plugins.
        </p>

        <pre><code class="js">// Width and height of the renderer
Replay.prototype.rendererWidth = 750;
Replay.prototype.rendererHeight = 750;

// Time between moves (in seconds)
Replay.prototype.playIncrement = 1;</code></pre>

        <ul>
            <li class="space-between">
                <p>
                    <code>Replay.prototype.initPlugin()</code>
                </p>
                <p>
                    Called immediately after initialization of the Replay object. This hook should be used for any logic that
                    needs to be precomputed.
                </p>
                <p>
                    <em>Note: the round log will not be available when this function is called.</em>
                </p>
            </li>
            <li class="space-between">
                <p>
                    <code>Replay.prototype.generateGamestate()</code>
                </p>
                <p>
                    Called whenever a new move is loaded. Any logic that is required in order to generate a gamestate should be
                    executed in this method.
                </p>
                <p>Several attributes are available on the Round object to provide move data. Use
                    <code>self.parseJSON(string)</code> to safely parse move data.
                </p>
                <ul>
                    <li>
                        <code>self.round</code>: Contains the parsed contents of the round log JSON file.
                    </li>
                    <li>
                        <code>self.moveNumber</code>: is available in order to access the current move. It is important to note that
                        moveNumber is not 0 indexed. A value of 1 would translate to index 0 in the moves array.
                    </li>
                </ul>
            </li>
            <li class="space-between">
                <p>
                    <code>Replay.prototype.render()</code>
                </p>
                <p>
                    Renders the current move gamestate to the WebGL context. Called immediately after
                    <code>self.generateGamestate()</code>
                </p>
            </li>
            <li class="space-between">
                <p>
                    <code>Replay.prototype.rendererLoaded()</code>
                </p>
                <p>
                    Called directly after the PIXI renderer has been defined and added to the page. Should be used to change any
                    options (like background color) on the renderer.
                </p>
            </li>
            <li class="space-between">
                <p>
                    <code>Replay.prototype.loadTextures()</code>
                </p>
                <p>
                    Load any required textures into the PIXI context. Call
                    <code>self.addTexture(name, url)</code> to add a new texture. The URL will be relative
                    to the assets folder that <code>script.js</code> is located in. Textures are added to
                    the <code>self.textures</code> object.
                </p>
            </li>
            <li class="space-between">
                <p>
                    <code>Replay.prototype.loadSprites()</code>
                </p>
                <p>
                    Load any PIXI sprites on initial load. Creating new sprites in the <code>render()</code> method should be
                    avoided if possible.
                </p>
                <p>
                    New sprites should be defined on <code>self.sprites</code> as a new key:value pair. Sprites can be added as a
                    group (in an array) if that is convenient. For example:
                </p>
                <pre><code class="js">
self.sprites["spriteName"] = new PIXI.Sprite(self.textures["textureName"]);

self.sprites["pieces"] = [];

for (var i = 0; i < 10; i++) {
    self.sprites["pieces"][i] = new PIXI.Sprite(self.textures["textureName"]);
}
        </code></pre>
            </li>
            <li class="space-between">
                <p>
                    <code>Replay.copy(src)</code>
                </p>
                <p>
                    Helper function to deep copy objects (useful when calculating a new gamestate for each move)
                </p>
            </li>
        </ul>
    </div>
</div>